{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkResponse(resp) {\n    if (resp.ok) {\n      return resp.json();\n    } else {\n      Promise.reject(`Ошибка: ${resp.status} ${resp.statusText}`);\n    }\n  }\n  getAllCards() {\n    return fetch(this._baseUrl + \"/cards\", {\n      method: \"GET\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n  addNewCard(values) {\n    return fetch(this._baseUrl + \"/cards\", {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify(values)\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n  removeCard(id) {\n    return fetch(this._baseUrl + `/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n  getUserData() {\n    return fetch(this._baseUrl + '/users/me', {\n      method: \"GET\",\n      headers: this._headers\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n  editProfileInfo(values) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: values.name,\n        about: values.about\n      })\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(this._baseUrl + `/cards/${id}/likes`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n  editAvatar(link) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify(link)\n    }).then(responce => {\n      return this._checkResponse(responce);\n    });\n  }\n}\nconst token = localStorage.getItem('jwt');\nconst newApi = new Api({\n  baseUrl: 'http://localhost:3000',\n  headers: {\n    authorization: token,\n    'Content-Type': 'application/json'\n  }\n});\nexport default newApi;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","resp","ok","json","Promise","reject","status","statusText","getAllCards","fetch","method","then","responce","addNewCard","values","body","JSON","stringify","removeCard","id","getUserData","editProfileInfo","name","about","changeLikeCardStatus","isLiked","editAvatar","link","token","localStorage","getItem","newApi","authorization"],"sources":["C:/Users/Kate/Desktop/Projects/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\r\n    constructor({ baseUrl, headers }) {\r\n        this._baseUrl = baseUrl;\r\n        this._headers = headers;\r\n    }\r\n\r\n    _checkResponse(resp) {\r\n        if (resp.ok) {\r\n            return resp.json();\r\n        } else {\r\n            Promise.reject(`Ошибка: ${resp.status} ${resp.statusText}`)\r\n        }\r\n    }\r\n\r\n    getAllCards() {\r\n        return fetch(this._baseUrl + \"/cards\", {\r\n            method: \"GET\",\r\n            headers: this._headers,\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n            })\r\n    }\r\n\r\n    addNewCard(values) {\r\n        return fetch(this._baseUrl + \"/cards\", {\r\n            method: \"POST\",\r\n            headers: this._headers,\r\n            body: JSON.stringify(values)\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n            })\r\n    }\r\n\r\n\r\n    removeCard(id) {\r\n        return fetch(this._baseUrl + `/cards/${id}`, {\r\n            method: \"DELETE\",\r\n            headers: this._headers,\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n\r\n            })\r\n    }\r\n\r\n    getUserData() {\r\n        return fetch(this._baseUrl + '/users/me', {\r\n            method: \"GET\",\r\n            headers: this._headers,\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n            })\r\n    }\r\n\r\n    editProfileInfo(values) {\r\n        return fetch(this._baseUrl + '/users/me', {\r\n            method: \"PATCH\",\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: values.name,\r\n                about: values.about,\r\n            })\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n            })\r\n\r\n    }\r\n\r\n    changeLikeCardStatus(id, isLiked) {\r\n        return fetch(this._baseUrl + `/cards/${id}/likes`, {\r\n            method: isLiked ? 'PUT' : 'DELETE',\r\n            headers: this._headers,\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n            })\r\n    }\r\n\r\n\r\n    editAvatar(link) {\r\n        return fetch(this._baseUrl + '/users/me/avatar', {\r\n            method: \"PATCH\",\r\n            headers: this._headers,\r\n            body: JSON.stringify(link)\r\n\r\n        })\r\n            .then((responce) => {\r\n                return this._checkResponse(responce);\r\n            })\r\n    }\r\n}\r\n\r\nconst token = localStorage.getItem('jwt');\r\n\r\nconst newApi = new Api({\r\n    baseUrl: 'http://localhost:3000',\r\n    headers: {\r\n        authorization: token,\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default newApi;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}